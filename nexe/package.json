{
  "author": {
    "name": "Jared Allard",
    "email": "jaredallard@outlook.com"
  },
  "name": "nexe",
  "description": "create single executables out of your [node/io].js applications",
  "license": "MIT",
  "version": "1.1.0",
  "contributors": [
    {
      "name": "Criag Condon",
      "email": "craig.j.condon@gmail.com",
      "url": "http://crcn.io/"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/jaredallard/nexe.git"
  },
  "main": "./lib/index.js",
  "dependencies": {
    "async": "1.5.2",
    "browserify": "^13.0.0",
    "builtins": "1.0.3",
    "colors": "^1.1.2",
    "glob": "^6.0.4",
    "gunzip-maybe": "^1.3.1",
    "insert-module-globals": "^7.0.1",
    "mkdirp": "^0.5.1",
    "module-deps": "^4.0.5",
    "ncp": "^2.0.0",
    "outcome": "0.0.18",
    "progress": "^1.1.8",
    "request": "^2.67.0",
    "sprintf": "~0.1.5",
    "step": "0.0.x",
    "tar-stream": "^1.3.1",
    "yargs": "^3.32.0"
  },
  "nexe": {
    "input": "./bin/nexe",
    "output": "nexe^$",
    "temp": "src",
    "runtime": {
      "framework": "nodejs",
      "version": "5.5.0",
      "ignoreFlags": true
    }
  },
  "preferGlobal": true,
  "bin": {
    "nexe": "bin/nexe"
  },
  "readme": "### Nexe\n\n[![Join the chat at https://gitter.im/crcn/nexe](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/jaredallard/nexe?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) [![Dependency Status](https://david-dm.org/jaredallard/nexe.svg)](https://david-dm.org/crcn/nexe)\n[![Stories in Ready](https://badge.waffle.io/jaredallard/nexe.svg?label=ready&title=Ready)](http://waffle.io/jaredallard/nexe)\n\nNexe is a command-line utility that compiles your Node.js application into a single executable file.\n\n![screen shot 2014-02-28 at 10 32 54 am](https://f.cloud.github.com/assets/757408/2296993/c276f7b6-a0a6-11e3-86d3-e6c5feba2a85.png)\n\n\n### Motivation\n\n- Ability to run multiple applications with *different* node.js runtimes.\n- Distributable binaries without needing node / npm.\n- Starts faster.\n- Lockdown specific application versions, and easily rollback.\n- Faster deployments.\n\n## Building Requirements\n\n- Linux / Mac / BSD / Windows\n- Python 2.6 or 2.7 (use --python if not in PATH)\n- Windows: Visual Studio 2010+\n\n## Caveats\n\n### Doesn't support native modules\n\n- Use the techniques below for working around dynamic require statements to exclude the module from the bundling, and deploy along side the executable in a node_module folder so your app can find it. Note: On windows you may need to have your app be named node.exe if .node file depends on node.\n\n### Doesn't support dynamic require statements\n\nSuch As:\n\n```javascript\nvar x = require(someVar);\n```\n\nIn this case nexe won't bundle the file\n\n```javascript\n\tvar x;\n\tif (someCheck) {\n\t\tx = require(\"./ver1.js\");\n\t} else {\n\t\tx = require(\"./var2.js\");\n\t}\n```\n\nIn this case nexe will bundle both files.\n\nWorkarounds:\n1) for dynamic requires that you want bundled add the following into your project\n\n```javascript\n\tvar dummyToForceIncludeForBundle = false;\n\tif (dummyToForceIncludeForBundle) {\n\t\trequire(\"./loadedDynamicallyLater.js\");\n\t\t// ...\n\t}\n```\nthis will trick the bundler into including them.\n\n2) for dynamic files getting included that you don't want to be\n\n```javascript\n\tvar moduleName = \"./ver2.js\";\n\tif (someCheck) {\n\t\tmoduleName = \"./ver1.js\";\n\t}\n\tvar x = require(moduleName);\n```\nNote: neither file will be bundled.\n\nUsing these two techniques you can change your application code so modules are not bundles, and generate a includes.js file as part of your build process so that the right files get bundled for your build configuration.\n\n### &#95;&#95;dirname\n\nOnce the module is bundled it is part of the executable. &#95;&#95;dirname is therefore the executable dir (process.execPath). Thus if you put resources on a relative path from the the executable your app will be able to access them.\n\nIf you had a data file at `/dev/myNodeApp/stateManager/handler/data/some.csv`\nand a file at `/dev/myNodeApp/stateManager/handler/loader.js`\n\n```javascript\n\tmodule.exports = fw.readFileSync(path.join(__dirname, \"./data/some.csv\"));\n```\nYou would need to deploy some.csv in a sub dir `data/` along side your executable\n\nThere are potential use cases for &#95;&#95;dirname where the executable path is not the correct substitution, and could result in a silent error (possibly even in a dependency that you are unaware of).\n\nNote: &#95;&#95;filename will be 'undefined'\n\n### child_process.fork\n\nchild_process.spawn works is unmodified, but child_process.fork will make an attempt to launch a new instance of your executable and run the bundled module.\n\n## Installation\n\nVia NPM:\n\n```bash\n\tnpm install nexe [-g]\n```\n\nOr git:\n\n```bash\n\tgit clone https://github.com/crcn/nexe.git\n```\n\n### CLI Usage\n\n```text\n\nUsage: nexe -i [sources] -o [binary] [options]\n\nOptions:\n\t-i, --input    The entry javascript files         [default: cwd]\n\t-o, --output   The output binary                  [default: out.nex]\n\t-r, --runtime  The node.js runtime to use         [default: \"latest\"]\n\t-t, --temp     The path to store node.js sources  [default: ./tmp/nexe]\n\t-f, --flags    Don't parse node and v8 flags, pass through app flags  [default: false]\n\t-v, --version  Display version number\n\t-p, --python   Set path of python to use.         [default: \"python\"]\n\t-F, --framework Set the framework to use.          [default: \"nodejs\"]\n\n```\n\n\n### Code Usage\n\n```javascript\n\nvar nexe = require('nexe');\n\nnexe.compile({\n\tinput: 'input.js', // where the input file is\n\toutput: 'path/to/bin', // where to output the compiled binary\n\tnodeVersion: '5.5.0', // node version\n\tnodeTempDir: 'src', // where to store node source.\n\tnodeConfigureArgs: ['opt', 'val'], // for all your configure arg needs.\n\tnodeMakeArgs: [\"-j\", \"4\"], // when you want to control the make process.\n\tpython: 'path/to/python', // for non-standard python setups. Or python 3.x forced ones.\n\tresourceFiles: [ 'path/to/a/file' ], // array of files to embed.\n\tflags: true, // use this for applications that need command line flags.\n\tjsFlags: \"--use_strict\", // v8 flags\n\tframework: \"node\" // node, nodejs, or iojs\n}, function(err) {\n\tif(err) {\n\t\treturn console.log(err);\n\t}\n\n\t // do whatever\n});\n\n```\n\n### package.json inclusion\n\nAs of 0.4.0 you can now embed nexe options into package.json. Note that this Format\nis still in works, so it is likely to change.\n\n```json\n\"nexe\": {\n\t\"input\": \"./bin/nexe\",\n\t\"output\": \"nexe^$\",\n\t\"temp\": \"src\",\n\t\"runtime\": {\n\t\t\"framework\": \"node\",\n\t\t\"version\": \"5.5.0\",\n\t\t\"js-flags\": \"--use_strict\",\n\t\t\"ignoreFlags\": true\n\t}\n}\n```\n\nNotes:\n\n* output: can use ^$ for platform specific file extension\n* js-flags: this is also known as v8 flags, and supports *all* v8 flags.\n\n## Maintainers\n\n* __Jared Allard__ ([@jaredallard](https://github.com/jaredallard)) &lt;[jaredallard@outlook.com](mailto:jaredallard@outlook.com)&gt; (Active)\n* __Christopher Karper__ ([@ckarper](https://github.com/CKarper)) &lt;[Christopher.Karper@gmail.com](mailto:Christopher.Karper@gmail.com)&gt; (Active)\n* __Craig Condon__ ([@crcn](https://github.com/crcn)) &lt;[craig.j.condon@gmail.com](mailto:craig.j.condon@gmail.com)&gt; (Old Project Owner)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jaredallard/nexe/issues"
  },
  "homepage": "https://github.com/jaredallard/nexe",
  "_id": "nexe@1.1.0",
  "_shasum": "42f1927f28cb635fc09e3b5e015516fff8d381d4",
  "_from": "nexe@",
  "_resolved": "https://registry.npmjs.org/nexe/-/nexe-1.1.0.tgz"
}
