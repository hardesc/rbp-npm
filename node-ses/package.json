{
  "author": {
    "name": "Aaron Heckmann",
    "email": "aaron.heckmann+github@gmail.com"
  },
  "contributors": [
    {
      "name": "Mark Stosberg",
      "email": "mark@rideamigos.com"
    },
    {
      "name": "Joshua Thomas",
      "email": "joshua.thomas+github@gmail.com"
    }
  ],
  "license": "MIT",
  "description": "Amazon SES (sendmail) for node",
  "keywords": [
    "amazon",
    "ses",
    "email",
    "sendmail",
    "amazon-ses"
  ],
  "name": "node-ses",
  "version": "1.1.0",
  "repository": {
    "url": "https://github.com/aheckmann/node-ses.git"
  },
  "scripts": {
    "test": "make test"
  },
  "dependencies": {
    "debug": "^2.2.0",
    "request": "^2.60.0",
    "xml2js": "0.4.*"
  },
  "devDependencies": {
    "jshint": "^2.8.0",
    "mocha": "*"
  },
  "optionalDependencies": {},
  "engines": {
    "node": ">= 0.6.x"
  },
  "readme": "#node-ses\n==========\n\nA simple and reliable Node.js mail for sending mail through Amazon SES.\n\n## Benefits\n\n * Does only one thing and does it well. Only the [SendEmail](http://docs.aws.amazon.com/ses/latest/APIReference/API_SendEmail.html) and [SendRawEmail](http://docs.aws.amazon.com/ses/latest/APIReference/API_SendRawEmail.html) API methods are implemented.\n * Good error handling:\n   * Only \"2xx\" and \"3xx\" resposnes from Amazon are considered successful.\n   * Amazon's XML format errors are converted to JavaScript options for easy handling.\n   * Support for the `debug` module is included if [debugging](#debugging) is needed.\n * Tested and reliable. Includes test suite. Sending email to SES since 2012.\n\n## Synopsis\n\nStart by creating a client object, and then call either the `sendEmail` or `sendRawEmail` method\ndepending on your needs.\n\n```javascript\nvar ses = require('node-ses')\n  , client = ses.createClient({ key: 'key', secret: 'secret' });\n\n// Give SES the details and let it construct the message for you. \nclient.sendEmail({\n   to: 'aaron.heckmann+github@gmail.com'\n , from: 'somewhereOverTheR@inbow.com'\n , cc: 'theWickedWitch@nerds.net'\n , bcc: ['canAlsoBe@nArray.com', 'forrealz@.org']\n , subject: 'greetings'\n , message: 'your <b>message</b> goes here'\n , altText: 'plain text'\n}, function (err, data, res) {\n // ...\n});\n\n// ... or build a message from scratch yourself and send it.\nclient.sendRawEmail({\n , from: 'somewhereOverTheR@inbow.com'\n , rawMessage: rawMessage\n}, function (err, data, res) {\n // ...\n});\n```\n\n## Installation\n\n`npm install node-ses`\n\nThe module has one primary export:\n\n## createClient()\n\nYou'll probably only be using this method. It takes an options object with the following properties:\n\n    `key` - (required) your AWS SES key\n    `secret` - (required) your AWS SES secret\n    `algorithm` - [optional] the AWS algorithm you are using. defaults to SHA1.\n    `amazon` - [optional] the amazon end-point uri. defaults to `https://email.us-east-1.amazonaws.com`\n\nNot all AWS regions support SES. Check [SES region support](http://docs.aws.amazon.com/ses/latest/DeveloperGuide/regions.html) to be sure the region you are in is supported.\n\n\n```js\nvar ses = require('node-ses')\n  , client = ses.createClient({ key: 'key', secret: 'secret' });\n```\n\n## client.sendEmail(options, function (err, data, res))\n\nComposes an email message based on input data, and then immediately queues the message for sending.\n\nThere are several important points to know about SendEmail:\n\n * You can only send email from verified email addresses and domains; otherwise, you will get an \"Email address not verified\" error. If your account is still in the Amazon SES sandbox, you must also verify every recipient email address except for the recipients provided by the Amazon SES mailbox simulator. For more information, go to the [Amazon SES Developer Guide](http://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html).\n * The total size of the message cannot exceed 10 MB. This includes any attachments that are part of the message.\n * Amazon SES has a limit on the total number of recipients per message. The combined number of To:, CC: and BCC: email addresses cannot exceed 50. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call Amazon SES repeatedly to send the message to each group.\n * For every message that you send, the total number of recipients (To:, CC: and BCC:) is counted against your sending quota - the maximum number of emails you can send in a 24-hour period. For information about your sending quota, go to the [Amazon SES Developer Guide](http://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html).\n\n\n`sendEmail` receives an options object with the following properties:\n\n    `from` - email address from which to send (required)\n    `subject` - string (required). Must be encoded as UTF-8\n    `message` - can be html (required). Must be encoded as UTF-8.\n    `altText` - plain text version of message. Must be encoded as UTF-8.\n    `to` - email address or array of addresses\n    `cc` - email address or array of addresses\n    `bcc` - email address or array of addresses\n    `replyTo` - email address\n\nAt least one of `to`, `cc` or `bcc` is required.\n\nOptional properties (overrides the values set in `createClient`):\n\n    `key` - AWS key\n    `secret` - AWS secret\n    `algorithm` - AWS algorithm to use\n    `amazon` - AWS end point\n\nThe `sendEmail` method transports your message to the AWS SES service. If Amazon\nreturns an HTTP status code that's less than `200` or greater than or equal to\n400, we will callback with an `err` object that is a direct translation of the XML error Amazon provides.\n\nCheck for errors returned since a 400 status is not uncommon.\n\nThe `data` returned in the callback is the HTTP body returned by Amazon as XML.\nSee the [SES API Response](http://docs.aws.amazon.com/ses/latest/DeveloperGuide/query-interface-responses.html) docs for details.\n\nThe `res` returned by the callback represents the HTTP response to calling the SES REST API as the [request](https://www.npmjs.org/package/request) module returns it.\n\n*The sendEmail method also be  provided in all lowercase as `sendemail` for backwards compatibility.*\n\n## client.sendRawEmail(options, function (err, data, res))\n\nSends an email message, with header and content specified by the client. The SendRawEmail action is useful for sending multipart MIME emails. The raw text of the message must comply with Internet email standards; otherwise, the message cannot be sent.\n\nThere are several important points to know about SendRawEmail:\n\n * You can only send email from verified email addresses and domains; otherwise, you will get an \"Email address not verified\" error. If your account is still in the Amazon SES sandbox, you must also verify every recipient email address except for the recipients provided by the Amazon SES mailbox simulator. For more information, go to the [Amazon SES Developer Guide](http://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html).\n * The total size of the message cannot exceed 10 MB. This includes any attachments that are part of the message.\n * Amazon SES has a limit on the total number of recipients per message. The combined number of To:, CC: and BCC: email addresses cannot exceed 50. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call Amazon SES repeatedly to send the message to each group.\n * The To:, CC:, and BCC: headers in the raw message can contain a group list. Note that each recipient in a group list counts towards the 50-recipient limit.\nFor every message that you send, the total number of recipients (To:, CC: and BCC:) is counted against your sending quota - the maximum number of emails you can send in a 24-hour period. For information about your sending quota, go to the [Amazon SES Developer Guide](http://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html).\n\n\n`sendRawEmail` receives an options object with the following properties:\n\n    `from` - email address from which to send (required)\n    `rawMessage` - the raw text of the message which includes a header and a body (required)\n\nWithin the raw text of the message, the following must be observed:\n\n* The `rawMessage` value must contain a header and a body, separated by a blank line.\n* All required header fields must be present.\n* Each part of a multipart MIME message must be formatted properly.\n* MIME content types must be among those supported by Amazon SES. For more information, see the [Amazon SES Developer Guide](http://docs.aws.amazon.com/ses/latest/DeveloperGuide/mime-types.html).\n* The `rawMessage` content must be base64-encoded, if MIME requires it.\n\nThe `sendRawEmail` method transports your message to the AWS SES service. If Amazon\nreturns an HTTP status code that's less than `200` or greater than or equal to\n400, we will callback with an `err` object that is a direct translation of the XML error Amazon provides.\n\n### Example\n\n```js\nvar CRLF = '\\r\\n'\n  , ses = require('node-ses')\n  , client = ses.createClient({ key: 'key', secret: 'secret' })\n  , rawMessage = [\n    'From: \"Someone\" <someone@example.com>',\n    'To: \"Someone Else\" <other@example.com>',\n    'Subject: greetings',\n    'Content-Type: multipart/mixed;',\n    '    boundary=\"_003_97DCB304C5294779BEBCFC8357FCC4D2\"',\n    'MIME-Version: 1.0',\n    '',\n    '--_003_97DCB304C5294779BEBCFC8357FCC4D2',\n    'Content-Type: text/plain; charset=\"us-ascii\"',\n    'Content-Transfer-Encoding: quoted-printable',\n    'Hi brozeph,',\n    '',\n    'I have attached a code file for you.',\n    '',\n    'Cheers.',\n    '',\n    '--_003_97DCB304C5294779BEBCFC8357FCC4D2',\n    'Content-Type: text/plain; name=\"code.txt\"',\n    'Content-Description: code.txt',\n    'Content-Disposition: attachment; filename=\"code.txt\"; size=4;',\n    '    creation-date=\"Mon, 03 Aug 2015 11:39:39 GMT\";',\n    '    modification-date=\"Mon, 03 Aug 2015 11:39:39 GMT\"',\n    'Content-Transfer-Encoding: base64',\n    '',\n    'ZWNobyBoZWxsbyB3b3JsZAo=',\n    '',\n    '--_003_97DCB304C5294779BEBCFC8357FCC4D2',\n    ''\n  ].join(CRLF);\n\nclient.sendRawEmail({\n , from: 'someone@example.com'\n , rawMessage: rawMessage\n}, function (err, data, res) {\n // ...\n});\n```\n\nCheck for errors returned since a 400 status is not uncommon.\n\nThe `data` returned in the callback is the HTTP body returned by Amazon as XML.\nSee the [SES API Response](http://docs.aws.amazon.com/ses/latest/DeveloperGuide/query-interface-responses.html) docs for details.\n\nThe `res` returned by the callback represents the HTTP response to calling the SES REST API as the [request](https://www.npmjs.org/package/request) module returns it.\n\n<a name=\"debugging\"></a>\n## Debugging\n\n```bash\n# Enable in the shell\nDEBUG=\"node-ses\" ./server.js\n```\n\n```javascript\n// ... or temporarily set in your code before `node-ses` is required.\nprocess.env.DEBUG='node-ses';\n```\n\n\nWhen debugging, it's useful to inspect the raw HTTP request and response send\nto Amazon. These can then checked against Amazon's documentation for the [SendMail](http://docs.aws.amazon.com/ses/latest/APIReference/API_SendEmail.html) API method and the [common errors](http://docs.aws.amazon.com/ses/latest/APIReference/CommonErrors.html) that Amazon might return.\n\nTo turn on debugging printed to STDERR, set `DEBUG=node-ses` in the environment before running your script. You can also set `process.env.DEBUG='node-ses';` in your code, before the `node-ses` module is required.\n\nSee the [debug module](https://www.npmjs.org/package/debug) docs for more debug output possibilities.\n\n## Running the Tests\n\n`make test`\n\n## See Also\n\n * [nodemailer](https://www.npmjs.com/package/nodemailer) has more features, including attachment support. There are many \"transport\" plugins available for it, including one for SES.\n\n## Licence\n\n[MIT](https://github.com/aheckmann/node-ses/blob/master/LICENSE)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/aheckmann/node-ses/issues"
  },
  "homepage": "https://github.com/aheckmann/node-ses",
  "_id": "node-ses@1.1.0",
  "_shasum": "8404e3295360597d19a128b5c6b88ab1f43a9f46",
  "_from": "node-ses@",
  "_resolved": "https://registry.npmjs.org/node-ses/-/node-ses-1.1.0.tgz"
}
